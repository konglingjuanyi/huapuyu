<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.0.xsd"
	default-autowire="byName">

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:config.properties</value>
			</list>
		</property>
	</bean>

	<!-- group 1 -->
	<bean id="parentDataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${db1.master.url}" />
		<property name="username" value="${db1.master.username}" />
		<property name="password" value="${db1.master.password}" />
		<property name="driverClassName" value="${db1.master.driver}" />
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="3" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>

	<!-- <bean id="parentDataSource1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> <property name="driverClassName" 
		value="${db1.master.driver}" /> <property name="url" value="${db1.master.url}" /> <property name="username" value="${db1.master.username}" 
		/> <property name="password" value="${db1.master.password}" /> <property name="maxActive" value="3" /> <property name="maxWait" 
		value="1000" /> <property name="poolPreparedStatements" value="true" /> <property name="defaultAutoCommit" value="true" /> 
		</bean> -->

	<bean id="ds1_write" parent="parentDataSource1" />

	<bean id="ds1_read1" destroy-method="close" parent="parentDataSource1">
		<property name="url" value="${db1.slave1.url}" />
		<property name="username" value="${db1.slave1.username}" />
		<property name="password" value="${db1.slave1.password}" />
	</bean>

	<bean id="ds1_read2" destroy-method="close" parent="parentDataSource1">
		<property name="url" value="${db1.slave2.url}" />
		<property name="username" value="${db1.slave2.username}" />
		<property name="password" value="${db1.slave2.password}" />
	</bean>

	<!-- group 2 -->
	<bean id="parentDataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${db2.master.url}" />
		<property name="username" value="${db2.master.username}" />
		<property name="password" value="${db2.master.password}" />
		<property name="driverClassName" value="${db2.master.driver}" />
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="3" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>

	<!-- <bean id="parentDataSource2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> <property name="driverClassName" 
		value="${db2.master.driver}" /> <property name="url" value="${db2.master.url}" /> <property name="username" value="${db2.master.username}" 
		/> <property name="password" value="${db2.master.password}" /> <property name="maxActive" value="3" /> <property name="maxWait" 
		value="1000" /> <property name="poolPreparedStatements" value="true" /> <property name="defaultAutoCommit" value="true" /> 
		</bean> -->

	<bean id="ds2_write" parent="parentDataSource2" />

	<bean id="ds2_read1" destroy-method="close" parent="parentDataSource2">
		<property name="url" value="${db2.slave1.url}" />
		<property name="username" value="${db2.slave1.username}" />
		<property name="password" value="${db2.slave1.password}" />
	</bean>

	<bean id="ds2_read2" destroy-method="close" parent="parentDataSource2">
		<property name="url" value="${db2.slave2.url}" />
		<property name="username" value="${db2.slave2.username}" />
		<property name="password" value="${db2.slave2.password}" />
	</bean>

	<!-- group 3 -->
	<bean id="parentDataSource3" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${db3.master.url}" />
		<property name="username" value="${db3.master.username}" />
		<property name="password" value="${db3.master.password}" />
		<property name="driverClassName" value="${db3.master.driver}" />
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="3" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>

	<!-- <bean id="parentDataSource3" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> <property name="driverClassName" 
		value="${db2.master.driver}" /> <property name="url" value="${db2.master.url}" /> <property name="username" value="${db2.master.username}" 
		/> <property name="password" value="${db2.master.password}" /> <property name="maxActive" value="3" /> <property name="maxWait" 
		value="1000" /> <property name="poolPreparedStatements" value="true" /> <property name="defaultAutoCommit" value="true" /> 
		</bean> -->

	<bean id="ds3_write" parent="parentDataSource3" />

	<bean id="ds3_read1" destroy-method="close" parent="parentDataSource3">
		<property name="url" value="${db3.slave1.url}" />
		<property name="username" value="${db3.slave1.username}" />
		<property name="password" value="${db3.slave1.password}" />
	</bean>

	<bean id="ds3_read2" destroy-method="close" parent="parentDataSource3">
		<property name="url" value="${db3.slave2.url}" />
		<property name="username" value="${db3.slave2.username}" />
		<property name="password" value="${db3.slave2.password}" />
	</bean>

	<!-- group 1, default -->
	<bean id="dataSource1" class="com.vip.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="write" value-ref="ds1_write" />
				<entry key="read01" value-ref="ds1_read1" />
				<entry key="read02" value-ref="ds1_read2" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="ds1_write" />
		<property name="dataSourceKey" ref="dynamicDataSourceKey1" />
	</bean>

	<bean id="dynamicDataSourceKey1" class="com.vip.datasource.DynamicDataSourceKeyImpl">
		<property name="readDateSourceMap">
			<map key-type="java.lang.String">
				<entry key="read01" value="read01" />
				<entry key="read02" value="read02" />
			</map>
		</property>
		<property name="writeKey">
			<value>write</value>
		</property>
		<property name="alwaysReplaceExist" value="false" />
		<property name="strategy" ref="roundRobinLoadBalanceStrategy1" />
	</bean>

	<bean id="roundRobinLoadBalanceStrategy1" class="com.vip.datasource.strategy.RoundRobinLoadBalanceStrategy">
		<constructor-arg>
			<map key-type="java.lang.String" value-type="java.lang.Integer">
				<entry key="read01" value="1" />
				<entry key="read02" value="1" />
			</map>
		</constructor-arg>
	</bean>

	<!-- group 2 -->
	<bean id="dataSource2" class="com.vip.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="write" value-ref="ds2_write" />
				<entry key="read01" value-ref="ds2_read1" />
				<entry key="read02" value-ref="ds2_read2" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="ds2_write" />
		<property name="dataSourceKey" ref="dynamicDataSourceKey2" />
	</bean>

	<bean id="dynamicDataSourceKey2" class="com.vip.datasource.DynamicDataSourceKeyImpl">
		<property name="readDateSourceMap">
			<map key-type="java.lang.String">
				<entry key="read01" value="read01" />
				<entry key="read02" value="read02" />
			</map>
		</property>
		<property name="writeKey">
			<value>write</value>
		</property>
		<property name="alwaysReplaceExist" value="false" />
		<property name="strategy" ref="roundRobinLoadBalanceStrategy2" />
	</bean>

	<bean id="roundRobinLoadBalanceStrategy2" class="com.vip.datasource.strategy.RoundRobinLoadBalanceStrategy">
		<constructor-arg>
			<map key-type="java.lang.String" value-type="java.lang.Integer">
				<entry key="read01" value="1" />
				<entry key="read02" value="1" />
			</map>
		</constructor-arg>
	</bean>

	<!-- group 3 -->
	<bean id="dataSource3" class="com.vip.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="write" value-ref="ds3_write" />
				<entry key="read01" value-ref="ds3_read1" />
				<entry key="read02" value-ref="ds3_read2" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="ds3_write" />
		<property name="dataSourceKey" ref="dynamicDataSourceKey3" />
	</bean>

	<bean id="dynamicDataSourceKey3" class="com.vip.datasource.DynamicDataSourceKeyImpl">
		<property name="readDateSourceMap">
			<map key-type="java.lang.String">
				<entry key="read01" value="read01" />
				<entry key="read02" value="read02" />
			</map>
		</property>
		<property name="writeKey">
			<value>write</value>
		</property>
		<property name="alwaysReplaceExist" value="false" />
		<property name="strategy" ref="roundRobinLoadBalanceStrategy3" />
	</bean>

	<bean id="roundRobinLoadBalanceStrategy3" class="com.vip.datasource.strategy.RoundRobinLoadBalanceStrategy">
		<constructor-arg>
			<map key-type="java.lang.String" value-type="java.lang.Integer">
				<entry key="read01" value="1" />
				<entry key="read02" value="1" />
			</map>
		</constructor-arg>
	</bean>

	<bean id="dataSource" class="com.vip.datasource.ShardDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="defaultDataSource" value-ref="dataSource1" />
				<entry key="dataSource2" value-ref="dataSource2" />
				<entry key="dataSource3" value-ref="dataSource3" />
			</map>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="count*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Throwable</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Throwable</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Throwable</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean id="dynamicDataSourceInterceptor" class="com.vip.datasource.interceptor.DynamicDataSourceInterceptor">
		<property name="attributes">
			<props>
				<prop key="get*">read</prop>
				<prop key="find*">read</prop>
				<prop key="count*">read</prop>
				<prop key="save*">write</prop>
				<prop key="delete*">write</prop>
				<prop key="update*">write</prop>
				<prop key="*">read</prop>
			</props>
		</property>
		<property name="dataSourceKey">
			<ref bean="dynamicDataSourceKey1" />
		</property>
	</bean>

	<!-- <bean id="myDynamicDataSourceInterceptor" class="com.anders.ssh.datasource.MyDynamicDatasourceInteceptor"> <property 
		name="dataSourceKey"> <ref bean="dynamicDataSourceKey" /> </property> </bean> -->

	<bean id="shardDataSourceInterceptor" class="com.vip.datasource.interceptor.ShardDataSourceInterceptor">
		<property name="shardStrategies">
			<map>
				<entry key="user">
					<value>com.vip.mybatis.strategy.UserShardStrategy</value>
				</entry>
			</map>
		</property>
		<property name="shardDataSourceKeys">
			<map key-type="java.lang.String">
				<entry key="defaultDataSource" value-ref="dynamicDataSourceKey1" />
				<entry key="dataSource2" value-ref="dynamicDataSourceKey2" />
				<entry key="dataSource3" value-ref="dynamicDataSourceKey3" />
			</map>
		</property>
	</bean>

	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>shardDataSourceInterceptor</value>
				<value>dynamicDataSourceInterceptor</value> 
				<!-- <value>myDynamicDataSourceInterceptor</value> -->
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>

	<context:annotation-config />

	<context:component-scan base-package="com.vip.mybatis.service" />

	<bean id="shardPlugin" class="com.vip.mybatis.plugin.ShardPlugin">
		<property name="sqlConverter" ref="sqlConverter" />
	</bean>

	<bean id="sqlConverter" class="com.vip.mybatis.converter.DefaultSqlConverter" />

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.vip.mybatis.dao" />
		<property name="sqlSessionFactoryBeanName" value="msqlSessionFactory" />
	</bean>

	<bean id="msqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.vip.mybatis.bo" />
		<property name="mapperLocations" value="classpath*:com/vip/mybatis/mapper/*Mapper.xml" /> 
		<property name="plugins">
			<array>
				<ref bean="shardPlugin" />
			</array>
		</property>
	</bean>
</beans>
