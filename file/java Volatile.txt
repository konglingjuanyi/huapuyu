一般的，如果多个线程协作存、取某个变量时，一般需要用到synchronized关键字进行同步操作，如： 
public class MyTestThread extends MyTest implements Runnable { 
private boolean _done = false; 
public synchronized boolean getDone() 
{ 
return _done; 
} 
public synchronized void setDone(boolean b) 
{ 
_done = b; 
} 

public void run( ) { 
boolean done; 
done = getDone(); 
while (!done) { 
repaint( ); 
try { 
Thread.sleep(100); 
} catch (InterruptedException ie) { 
return; 
} 
} 
} 
} 
或者： 
public class MyTestThread extends MyTest implements Runnable { 
private boolean _done = false; 
public void setDone(boolean b) 
{ 
synchronized(this) 
{ 
_done = b; 
} 
} 

public void run( ) { 
boolean done; 
synchronized(this) 
{ 
done = _done; 
} 

while (!done) { 
repaint( ); 
try { 
Thread.sleep(100); 
} catch (InterruptedException ie) { 
return; 
} 
} 
} 
} 
但是，通过volatile关键字，我们可以大大简化： 
public class MyTestThread extends MyTest implements Runnable { 
private volatile boolean done = false; 
public void run( ) { 
while (!done) { 
repaint( ); 
try { 
Thread.sleep(100); 
} catch (InterruptedException ie) { 
return; 
} 
} 
} 
public void setDone(boolean b) { 
done = b; 
} 
} 









Volatile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。 

Java语言规范中指出：为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比。 

这样当多个线程同时与某个对象交互时，就必须要注意到要让线程及时的得到共享成员变量的变化。 

而volatile关键字就是提示VM：对于这个成员变量不能保存它的私有拷贝，而应直接与共享成员变量交互。 

使用建议：在两个或者更多的线程访问的成员变量上使用volatile。当要访问的变量已在synchronized代码块中，或者为常量时，不必使用。 

由于使用volatile屏蔽掉了VM中必要的代码优化，所以在效率上比较低，因此一定在必要时才使用此关键字。 






我们知道，在Java中设置变量值的操作，除了long和double类型的变量外都是原子操作，也就是说，对于变量值的简单读写操作没有必要进行同步。 

这在JVM 1.2之前，Java的内存模型实现总是从主存读取变量，是不需要进行特别的注意的。而随着JVM的成熟和优化，现在在多线程环境下volatile关键字的使用变得非常重要。 

在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 

要解决这个问题，只需要像在本程序中的这样，把该变量声明为volatile（不稳定的）即可，这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 

Volatile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。 

Java语言规范中指出：为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比。 

这样当多个线程同时与某个对象交互时，就必须要注意到要让线程及时的得到共享成员变量的变化。 

而volatile关键字就是提示VM：对于这个成员变量不能保存它的私有拷贝，而应直接与共享成员变量交互。 

使用建议：在两个或者更多的线程访问的成员变量上使用volatile。当要访问的变量已在synchronized代码块中，或者为常量时，不必使用。 

由于使用volatile屏蔽掉了VM中必要的代码优化，所以在效率上比较低，因此一定在必要时才使用此关键字。 

请看如下示例: 
package ch17_concurrency;
2
3
4class UnresponsiveUI{
5 private volatile double d=1;
6 public UnresponsiveUI() throws Exception{
7 while(d>0){
8 d=d+(Math.PI+Math.E)/d;
9 }
10 System.in.read();
11 }
12}
13
14public class _19_ResponsiveUI extends Thread {
15 private static volatile double d=1;
16 public _19_ResponsiveUI(){
17 setDaemon(true);
18 start();
19 }
20 public void run(){
21 while(true){
22 //System.out.println(d); 
23 d=d+(Math.PI+Math.E)/d;
24 }
25 }
26
27 public static void main(String[] args) throws Exception {
28 // TODO Auto-generated method stub 
29 //new UnresponsiveUI(); 
30 new _19_ResponsiveUI();
31 System.in.read();
32 System.out.println(d);
33 }
34
35}
36











Java中volatile关键字的效果
之前在问答频道回答的一道题。问答频道没有收录到博客的功能，自己整理收藏一下。 

http://www.javaeye.com/problems/1737 

使用volatile和不使用volatile的区别在于JVM内存主存和线程工作内存的同步之上。volatile保证变量在线程工作内存和主存之间一致。以下是示例程序，成员变量boolValue用volatile修饰会导致程序很快退出： 
Java代码 
package linyumin.test.thread;      
/**    
 *     
 * @author llade    
 *    
 */     
public class VolatileObjectTest {      
     
    /**     
     * 成员变量boolValue使用volatile和不使用volatile会有明显区别的。    
     * 本程序需要多试几次，就能知道两者之间的区别的。    
     * @param args    
     */     
    public static void main(String[] args) {      
        final VolatileObjectTest volObj=new VolatileObjectTest();      
        Thread t1=new Thread(){      
            public void run(){      
                System.out.println("t1 start");      
                for(;;){      
                        volObj.waitToExit();      
                }      
            }      
        };      
        t1.start();      
        Thread t2=new Thread(){      
            public void run(){      
                System.out.println("t2 start");      
                for(;;){      
                    volObj.swap();      
                }      
            }      
        };      
        t2.start();      
    }      
     
    boolean boolValue;//加上volatile 修饰的是时候，程序会很快退出，因为volatile 保证各个线程工作内存的变量值和主存一致。所以boolValue == !boolValue就成为了可能。      
     
    public void waitToExit() {      
        if(boolValue == !boolValue)System.exit(0);//非原子操作，理论上应该很快会被打断。实际不是，因为此时的boolValue在线程自己内部的工作内存的拷贝，因为它不会强制和主存区域同步，线程2修改了boolValue很少有机会传递到线程一的工作内存中。所以照成了假的“原子现象”。      
    }      
          
    public void swap() {//不断反复修改boolValue，以期打断线程t1.      
        boolValue = !boolValue;      
    }      
     
}    
