getMethod只返回用public修饰的方法，包括自定义的、实现的接口的方法、继承的父类的方法 
按以下顺序查找：class -> superclass -> interface (in the declared order) 

getDeclaredMethod返回自定义的方法，不包括从父类继承的方法 


另外getField与getDeclaredField、getConstructor与getDeclaredConstructor的区别与这个差不多 

不过getField按以下顺序查找：class -> interface (in the declared order) -> superclass 

getDeclaredMethod和getDeclaredField等可以取到private
getMethod和getField等不可以取到private，只能取public


待反射的类
package test;

public class TestClass
{
        public String name;//must be public, can not be private
        
        public void setName(String name)
        {
                this.name = name;
        }
        
        public String getName()
        {
                return this.name;
        }
        
        public TestClass()
        {
                System.out.println("construtor");
        }

        public TestClass(String name, int age)
        {
                System.out.println("construtor|Name : " + name + "; Age : " + String.valueOf(age) + "!");
        }


        public void PrintMsg()
        {
                System.out.println("PringMsg");
        }

        public void PrintMsg(String name, int age)
        {
                System.out.println("PringMsg|Name : " + name + "; Age : " + String.valueOf(age) + "!");
        }
}


执行反射
try
                {
                        //Class c = Class.forName("TestClass");
                        System.out.println(TestClass.class.getName());
                        Class a = Class.forName(TestClass.class.getName());
                        a.newInstance();

                        Class b = Class.forName("test.TestClass");
                        Class[] cTypes = new Class[]
                                {String.class, int.class};
                        Constructor ctor = b.getConstructor(cTypes);
                        Object[] arg = new Object[]
                                {"zhuzhen", 29};
                        Object obj = ctor.newInstance(arg);

                        Class c = Class.forName("test.TestClass");
                        Class[] ptypes = new Class[2];
                        ptypes[0] = Class.forName("java.lang.String");
                        ptypes[1] = int.class;
                        Method m1 = c.getMethod("PrintMsg", ptypes);
                        Method m2 = c.getMethod("PrintMsg");
//                        TestClass obj1 = new TestClass();
                        Object[] arg2 = new Object[2];
                        arg[0] = new String("zhuzhen");
                        arg[1] = 23;
                        Object r1 = m1.invoke(a.newInstance(), arg);
                        Object r2 = m2.invoke(a.newInstance());
//                        Integer rval = (String) r;
//                        System.out.println(rval);

                        Object t = a.newInstance();
                        Field f = c.getField("name");
                        System.out.println(f.get(t));
                        f.set(t, "guolili");
                        System.out.println(f.get(t));


                }
                catch (Exception ex)
                {
                        ex.printStackTrace();
                }