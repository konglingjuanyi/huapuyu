<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security"  
       xmlns:jaxws="http://cxf.apache.org/jaxws"
	   xmlns:jaxrs="http://cxf.apache.org/jaxrs" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       	   				   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           				   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           				   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           				   http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
           				   http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
						   http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
						   
	<!-- property -->
	<import resource="classpath:config/spring-property.xml"/>
	
	<!-- annotation -->
	<import resource="classpath:config/spring-annotation.xml"/>
	
	<context:component-scan base-package="com.anders.ssh.taskexecutor"/>
	<context:component-scan base-package="com.anders.ssh.others"/>
	
	<!-- ibatis -->
	<import resource="classpath:config/spring-ibatis.xml"/>
	
	<!-- mybatis -->
	<import resource="classpath:config/spring-mybatis.xml"/>
	
	<!-- 普通POJO对象 -->
	<bean id="pojo" class="com.anders.ssh.ioc.Pojo">
		<property name="id" value="123"/>
		<property name="name" value="zhuzhen"/>
		<property name="score" value="95"/>
	</bean>
	
	<!-- Setter注入 -->  
	<bean id="setterInjection" class="com.anders.ssh.ioc.SetterInjection">
		<property name="pojo" ref="pojo"/>
	</bean>
	
	<!-- 构造器注入 -->   
	<bean id="constructorInjection" class="com.anders.ssh.ioc.ConstructorInjection">
		<constructor-arg index="0" ref="pojo"/>
		<constructor-arg index="1" type="int" value="10000"/>
		<constructor-arg index="2" type="java.lang.String" value="cme"/>
	</bean> 
	
	<!-- 静态工厂注入 -->
	<bean id="factoryInjection" class="com.anders.ssh.ioc.FactoryInjection" factory-method="createInstance">
  		<constructor-arg index="0" ref="pojo"/>
		<constructor-arg index="1" type="int" value="20000"/>
		<constructor-arg index="2" type="java.lang.String" value="pm"/> 
	</bean>
	
	<bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5" />
		<property name="keepAliveSeconds" value="200" />
		<property name="maxPoolSize" value="10" />
		<property name="queueCapacity" value="25" />
	</bean>
	
	<!-- jpa unitils配置 -->
	<!-- 
	LocalEntityManagerFactoryBean:使用JPA PersistenceProvider自动检测机制( according to JPA's Java SE  bootstrapping )，并且大多数情况下，你只能定义一下persistence unit name
	从JNDI获取EntityManagerFactory:应用发布在javaee5的服务器中
	<beans>
		<jee:jndi-lookup id="myEmf" jndi-name="persistence/myPersistenceUnit"/>
	</beans>
	LocalContainerEntityManagerFactoryBean:spring扮演了容器的角色。完全掌管JPA
	-->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 
			没有配置jpaVendorAdapter，单测时会报如下错误：
			org.unitils.core.UnitilsException: Make sure that the persistence provider that is used is an instance of UnitilsHibernatePersistenceProvider
				at org.unitils.orm.jpa.util.provider.hibernate.HibernateJpaProviderSupport.getProviderSpecificConfigurationObject(HibernateJpaProviderSupport.java:78)
		-->
        <property name="jpaVendorAdapter">
			<bean class="org.unitils.orm.jpa.util.provider.hibernate.UnitilsHibernateJpaVendorAdapter"/>
        </property>
        <!-- 
         	由于在spring-test.xml中已经为entityManagerFactory配置了datasource，所以如果在persistence-test.xml继续配置jdbc，则会报如下错误：
         	ERROR [2012-05-26 16:37:04] [org.hibernate.tool.hbm2ddl.SchemaExport] schema export unsuccessful (SchemaExport.java:287)
			java.lang.UnsupportedOperationException: Not supported by BasicDataSource
        -->
        <property name="persistenceXmlLocation" value="persistence-test.xml"/>
    </bean>
    
    <bean id="jpaTxManager" class="org.springframework.orm.jpa.JpaTransactionManager">
	  	<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/>
		<property name="hibernateProperties">
	    	<props>
	    		<prop key="hibernate.dialect">${dev.hibernate.dialect}</prop>
	    		<prop key="hibernate.show_sql">${dev.hibernate.show_sql}</prop>
	    		<prop key="hibernate.format_sql">${dev.hibernate.format_sql}</prop>
	    		<prop key="hibernate.hbm2ddl.auto">${dev.hibernate.hbm2ddl.auto}</prop>
	    		<!--  
	    		<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
	    		<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
				<prop key="hibernate.cache.region_prefix">${hibernate.cache.region_prefix}</prop>
				<prop key="hibernate.memcached.servers">${memcached.servers}</prop>
				<prop key="hibernate.memcached.memcacheClientFactory">${hibernate.memcached.memcacheClientFactory}</prop>
				-->
	    	</props>
	    </property>
		<property name="mappingResources">
			<list>
				<!--  
		    	<value>com/anders/ssh/bo/xml/Data.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/Area.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/House.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/RentHouse.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/SecondHandHouse.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/User.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/Role.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/UserGroup.hbm.xml</value>
		    	<value>com/anders/ssh/bo/xml/Resource.hbm.xml</value>
		    	-->
		    </list>
		</property>
		<!--  
		<property name="annotatedClasses">
			<list>
		    	<value>com.anders.ssh.bo.test.FenBiao</value>
		    </list>
		</property>
		-->
	    <property name="packagesToScan" value="com.anders.ssh.bo"/>
	</bean>
    
    <!-- 这个事务管理器的ID不要改，貌似Spring默认会使用这个ID -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	  	<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!--  
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${dev.driver}" />
		<property name="url" value="${dev.url}" />
		<property name="username" value="${dev.username}" />
		<property name="password" value="${dev.password}" />
		<property name="maxActive" value="100" />
		<property name="maxWait" value="1000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="defaultAutoCommit" value="true" />
	</bean>
	-->
    
	<bean id="dataSource" class="org.unitils.database.UnitilsDataSourceFactoryBean" />
</beans>