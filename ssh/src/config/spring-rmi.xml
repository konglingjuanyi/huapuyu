<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="andersRmi" class="com.anders.ssh.rmi.impl.AndersRmiImpl" />

	<!-- 传统的RMI调用，使用特定的JRMP（Java Remote Method Protocol）二进制协议，很难穿透防火墙，仅适合在企业内部网使用 -->
	<!--RmiServiceExporter显示地支持使用RMI调用器暴露任何非RMI服务 -->
	<bean id="rmiServiceExporter" class="org.springframework.remoting.rmi.RmiServiceExporter">
		<property name="service" ref="andersRmi" />
	 	<property name="serviceInterface" value="com.anders.ssh.rmi.AndersRmi" />
	 	<!--定义要暴露的服务名可以与输出的bean不同名，客户端通过这个名字来调用服务 -->
	 	<property name="serviceName" value="AndersRmi" />
	 	<!--覆盖RMI注册端口号(1099)，通常应用服务器也会维护RMI注册，最好不要冲突 -->
	 	<property name="registryPort" value="1199" />
	 	<!-- alwaysCreateRegistry设置为true，这个端口上只会启动一个register，如果想再重新启动server，就会报端口被占用的错误 -->
	 	<property name="alwaysCreateRegistry" value="true" />
	 	<property name="interceptors">
			<list><ref bean="securityInterceptor"/></list>
		</property>
	</bean>

	<bean id="securityInterceptor" class="com.anders.ssh.rmi.SecurityInterceptor">
		<!-- 这里配置允许访问RMI的客户端IP地址 -->
	 	<property name="allowed">
	 		<set>
	 			<value>127.0.0.1</value>
	 			<value>localhost</value>
	 			<value>172.17.227.50</value>
	 		</set>
		</property>
	</bean>
</beans>
