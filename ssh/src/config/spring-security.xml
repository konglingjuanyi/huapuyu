<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
			 xmlns:beans="http://www.springframework.org/schema/beans"
    		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    		 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        		 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">
                        
	<!-- 拦截成自定义的读取权限的方式 重点在before上
    <http auto-config="true"/>
     
    <beans:bean id="filterSecurityInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor" autowire="byType">
        <beans:property name="objectDefinitionSource" ref="filterInvocationDefinitionSource" />
        <custom-filter before="FILTER_SECURITY_INTERCEPTOR" />
    </beans:bean>
    
	<beans:bean id="filterInvocationDefinitionSource" class="security.FilterUser">
	   <beans:property name="adminPage" value="/admin.jsp"/> 
       <beans:property name="userPage" value="/**"/> 
       <beans:property name="userDao" ref="userDao"/>
	</beans:bean>
	
	<authentication-provider user-service-ref="userDetailsService"/>
	<beans:bean id="userDetailsService" class="security.UserIn"/>
	-->
	
	<!--  
    <http auto-config="true" access-denied-page="/jsp/accessDenied.jsp">
		<intercept-url pattern="/css/**" filters="none" />
		<intercept-url pattern="/images/**" filters="none" />
		<intercept-url pattern="/js/**" filters="none" />
		<intercept-url pattern="/login.jsp" filters="none" />
		<form-login login-page="/login.jsp" default-target-url="/index.jsp" authentication-failure-url="/login.jsp" />
		<access-denied-handler error-page="/common/403.jsp"/> 
		<logout logout-success-url="/login.jsp" />
		<session-management>
        	<concurrency-control max-sessions="10" error-if-maximum-exceeded="true" />
   		</session-management>
        <custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	 </http>
    
    <beans:bean id="securityFilter" class="security.FilterSecurityInterceptor">  
        <beans:property name="authenticationManager" ref="MyAuthenticationManager" />  
        <beans:property name="accessDecisionManager" ref="AccessDecisionManager" />  
        <beans:property name="securityMetadataSource" ref="MySecurityMetadataSource" />  
    </beans:bean>  
    
    <beans:bean id="MySecurityMetadataSource" init-method="loadResourceDefine" class="com.softvan.spring.security.InvocationSecurityMetadataSourceService">  
        <beans:property name="roleService" ref="RoleService" />  
        <beans:property name="actionService" ref="ActionService" />  
    </beans:bean>  
  
    <authentication-manager alias="MyAuthenticationManager">  
        <authentication-provider user-service-ref="UserDetailService">  
            <s:password-encoder hash="sha" />   
        </authentication-provider>  
    </authentication-manager> 
    
	<beans:bean id="userDetailsService" class="com.rstco.frame.pub.security.support.MyUserDetailService" />

    <beans:bean id="myAccessDecisionManagerBean"
        class="com.rstco.frame.pub.security.support.MyAccessDecisionManager">
    </beans:bean>
 
    <beans:bean id="mySecurityMetadataSource"
        class="com.rstco.frame.pub.security.support.MyInvocationSecurityMetadataSourceService">
    </beans:bean>
    -->
    
    <global-method-security pre-post-annotations="enabled">
        <!-- AspectJ pointcut expression that locates our "post" method and applies security that way
        <protect-pointcut expression="execution(* bigbank.*Service.post*(..))" access="ROLE_TELLER"/>
        -->
    </global-method-security>
    
    <http use-expressions="true">
		<intercept-url pattern="/css/**" filters="none" />
		<intercept-url pattern="/images/**" filters="none" />
		<intercept-url pattern="/js/**" filters="none" />

		 
		<intercept-url pattern="/data/update*" access="hasAnyRole('ROLE_ADMIN')" />
		<intercept-url pattern="/data/delete*" access="hasAnyRole('ROLE_ADMIN')" />
		<intercept-url pattern="/data/list*" access="hasAnyRole('ROLE_USER')" />
		<intercept-url pattern="/role/update*" access="hasAnyRole('ROLE_ADMIN')" />
		<intercept-url pattern="/role/delete*" access="hasAnyRole('ROLE_ADMIN')" />
		<intercept-url pattern="/role/list*" access="hasAnyRole('ROLE_USER')" />
		
		

		<!--
		<intercept-url pattern="/**" access="hasAnyRole('ROLE_USER')"/>  
		<form-login login-page="/login.jsp" default-target-url="/index.jsp" authentication-failure-url="/login.jsp" />
		<logout logout-success-url="/login.jsp" />
		
		<session-management invalid-session-url="/timeout.jsp">
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
        </session-management>
        -->
        <form-login login-page="/login.jsp" authentication-failure-url="/loginError.jsp"/>
        <logout />
        <remember-me />
        <session-management invalid-session-url="/timeout.jsp">
            <concurrency-control max-sessions="10" error-if-maximum-exceeded="true" />
        </session-management>
	</http>
	
	  
	<authentication-manager>  
    	<authentication-provider>  
        	<jdbc-user-service  
	            data-source-ref="dataSource"  
	            users-by-username-query="SELECT name, pwd, 'true' FROM tb_user WHERE name = ? AND enable = true"  
	            authorities-by-username-query="SELECT a.name, b.name AS role FROM tb_user a, tb_role b, tb_user_role_relation c WHERE a.id = c.user_id AND c.role_id = b.id AND a.name = ?" />  
    	</authentication-provider>  
	</authentication-manager>
	 
	<!--
	<authentication-manager alias="authenticationManager">
		<authentication-provider>
			<user-service>
				<user authorities="ROLE_USER" name="guest" password="guest"/>
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
	
	<authentication-manager>
        <authentication-provider>
            <user-service>
                <user name="rod" password="123" authorities="ROLE_SUPERVISOR, ROLE_USER, ROLE_TELLER" />
            </user-service>
        </authentication-provider>
    </authentication-manager>
    -->
	
	<!-- 认证配置, 使用userDetailsService提供的用户信息 -->
	<!--  
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailsService">
			<password-encoder hash="plaintext" />
		</authentication-provider>
	</authentication-manager>
	-->

	<!-- 项目实现的用户查询服务 -->
	<!--  
	<beans:bean id="userDetailsService" class="security.UserDetailsServiceImpl" />
	-->
	
</beans:beans>
