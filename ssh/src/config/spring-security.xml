<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
			 xmlns:beans="http://www.springframework.org/schema/beans"
    		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    		 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">
                        
	<!-- 拦截成自定义的读取权限的方式 重点在before上
    <http auto-config="true"/>
     
    <beans:bean id="filterSecurityInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor" autowire="byType">
        <beans:property name="objectDefinitionSource" ref="filterInvocationDefinitionSource" />
        <custom-filter before="FILTER_SECURITY_INTERCEPTOR" />
    </beans:bean>
    
	<beans:bean id="filterInvocationDefinitionSource" class="security.FilterUser">
	   <beans:property name="adminPage" value="/admin.jsp"/> 
       <beans:property name="userPage" value="/**"/> 
       <beans:property name="userDao" ref="userDao"/>
	</beans:bean>
	
	<authentication-provider user-service-ref="userDetailsService"/>
	<beans:bean id="userDetailsService" class="security.UserIn"/>
	-->
	
	<http auto-config="true" access-denied-page="/jsp/accessDenied.jsp">  
        <intercept-url pattern="/css/**" filters="none" />  
        <intercept-url pattern="/images/**" filters="none" />  
        <intercept-url pattern="/js/**" filters="none" />  
        <!-- 增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，  
        这个filter位于FILTER_SECURITY_INTERCEPTOR之前  -->  
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />  
    </http>  
    
    <!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，  
        我们的所有控制将在这三个类中实现，解释详见具体配置  -->  
    <beans:bean id="myFilter" class="com.softvan.spring.security.FilterSecurityInterceptor">  
        <beans:property name="authenticationManager" ref="MyAuthenticationManager" />  
        <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源     -->  
        <beans:property name="accessDecisionManager" ref="AccessDecisionManager" />  
        <beans:property name="securityMetadataSource" ref="MySecurityMetadataSource" />  
    </beans:bean>  
    
    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问     -->  
    <beans:bean id="MySecurityMetadataSource" init-method="loadResourceDefine"  class="com.softvan.spring.security.InvocationSecurityMetadataSourceService">  
        <beans:property name="roleService" ref="RoleService" />  
        <beans:property name="actionService" ref="ActionService" />  
    </beans:bean>  
  
    <!-- 验证配置 ， 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->  
    <authentication-manager alias="MyAuthenticationManager">  
        <authentication-provider user-service-ref="UserDetailService">  
            <!--  
            <s:password-encoder hash="sha" />  
             -->  
        </authentication-provider>  
    </authentication-manager> 
	
</beans:beans>
