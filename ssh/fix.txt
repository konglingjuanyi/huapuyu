1.java.lang.NoSuchMethodError: javax.persistence.OneToMany.orphanRemoval()Z
解决方式：去掉ejb3-persistence.jar

2.运行memcached client测试时，提示无法连接memcached server
解决方式：默认ubuntu下运行命令memcached绑定的是127.0.0.1，需要修改为绑定具体地址，使用命令memcached -m 64 -p 11211 -u memcache -l 192.168.2.90 &

3.使用unitils（版本unitils-3.2-SNAPSHOT-with-dependencies）报如下错误：
org.unitils.core.UnitilsException: Error inserting test data from DbUnit dataset for method public void com.anders.ssh.common.UnitilsTest.test1()
	at org.unitils.dbunit.DbUnitModule.insertDataSet(DbUnitModule.java:156)
	at org.unitils.dbunit.DbUnitModule$DbUnitListener.beforeTestSetUp(DbUnitModule.java:556)
	at org.unitils.core.Unitils$UnitilsTestListener.beforeTestSetUp(Unitils.java:273)
	at org.unitils.UnitilsJUnit4TestClassRunner$TestListenerInvokingMethodRoadie.runBeforesThenTestThenAfters(UnitilsJUnit4TestClassRunner.java:151)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:84)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)
	at org.unitils.UnitilsJUnit4TestClassRunner.invokeTestMethod(UnitilsJUnit4TestClassRunner.java:95)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:61)
	at org.unitils.UnitilsJUnit4TestClassRunner.access$000(UnitilsJUnit4TestClassRunner.java:44)
	at org.unitils.UnitilsJUnit4TestClassRunner$1.run(UnitilsJUnit4TestClassRunner.java:62)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)
	at org.unitils.UnitilsJUnit4TestClassRunner.run(UnitilsJUnit4TestClassRunner.java:68)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: org.unitils.core.UnitilsException: Error while executing DataSetLoadStrategy
	at org.unitils.dbunit.datasetloadstrategy.impl.BaseDataSetLoadStrategy.execute(BaseDataSetLoadStrategy.java:46)
	at org.unitils.dbunit.DbUnitModule.insertDataSet(DbUnitModule.java:230)
	at org.unitils.dbunit.DbUnitModule.insertDataSet(DbUnitModule.java:153)
	... 18 more
Caused by: org.dbunit.dataset.NoSuchColumnException: tb_user.NAME -  (Non-uppercase input column: name) in ColumnNameToIndexes cache map. Note that the map's column names are NOT case sensitive.
	at org.dbunit.dataset.AbstractTableMetaData.getColumnIndex(AbstractTableMetaData.java:117)
	at org.dbunit.operation.AbstractOperation.getOperationMetaData(AbstractOperation.java:89)
	at org.dbunit.operation.AbstractBatchOperation.execute(AbstractBatchOperation.java:140)
	at org.dbunit.operation.CompositeOperation.execute(CompositeOperation.java:79)
	at org.unitils.dbunit.datasetloadstrategy.impl.CleanInsertLoadStrategy.doExecute(CleanInsertLoadStrategy.java:45)
	at org.unitils.dbunit.datasetloadstrategy.impl.BaseDataSetLoadStrategy.execute(BaseDataSetLoadStrategy.java:44)
	... 20 more
这是unitils使用dbunit的一个bug，默认使用的是DefaultMetadataHandler，实际上应该使用MySqlMetadataHandler，两个类的getColumns方法有差异

*********************************MySqlMetadataHandler*********************************
public ResultSet getColumns(DatabaseMetaData databaseMetaData, String schemaName, String tableName) 
    throws SQLException {
        // Note that MySQL uses the catalogName instead of the schemaName, so
        // pass in the given schema name as catalog name (first argument).
        ResultSet resultSet = databaseMetaData.getColumns(
                schemaName, null, tableName, "%");
        return resultSet;
    }
   
*********************************DefaultMetadataHandler*********************************
public ResultSet getColumns(DatabaseMetaData databaseMetaData, String schemaName, String tableName) 
    throws SQLException 
    {
        if(logger.isTraceEnabled())
            logger.trace("getColumns(databaseMetaData={}, schemaName={}, tableName={}) - start", 
                    new Object[] {databaseMetaData, schemaName, tableName} );
        
        ResultSet resultSet = databaseMetaData.getColumns(
                null, schemaName, tableName, "%");
        return resultSet;
    }
    
修改方式如下：
打开unitils-dbunit项目的DbUnitModule.java（路径为：unitils-3.3-with-dependencies\unitils-3.3\unitils-dbunit\src\main\java\org\unitils\dbunit）源码
修改方法createDbUnitConnection（如下），添加下面代码
		if(dbSupport.getDatabaseDialect().equalsIgnoreCase("db2"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new Db2DataTypeFactory());
			config.setProperty(PROPERTY_METADATA_HANDLER, new Db2MetadataHandler());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("hsqldb"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new HsqldbDataTypeFactory());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("mssql"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new MsSqlDataTypeFactory());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("mysql"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new MySqlDataTypeFactory());
			config.setProperty(PROPERTY_METADATA_HANDLER, new MySqlMetadataHandler());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("oracle"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new OracleDataTypeFactory());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("postgresql"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new PostgresqlDataTypeFactory());
		}
 
 protected DbUnitDatabaseConnection createDbUnitConnection(String schemaName) {
        // A DbSupport instance is fetched in order to get the schema name in correct case
        DataSource dataSource = getDatabaseModule().getDataSourceAndActivateTransactionIfNeeded();
        SQLHandler sqlHandler = new DefaultSQLHandler(dataSource);
        DbSupport dbSupport = getDbSupport(configuration, sqlHandler, schemaName);

        // Create connection
        DbUnitDatabaseConnection connection = new DbUnitDatabaseConnection(dataSource, dbSupport.getSchemaName());
        DatabaseConfig config = connection.getConfig();

        // Make sure that dbunit's correct IDataTypeFactory, that handles dbms specific data type issues, is used
        IDataTypeFactory dataTypeFactory = getInstanceOf(IDataTypeFactory.class, configuration, dbSupport.getDatabaseDialect());
        config.setProperty(PROPERTY_DATATYPE_FACTORY, dataTypeFactory);
        // Make sure that table and column names are escaped using the dbms-specific identifier quote string
        config.setProperty(PROPERTY_ESCAPE_PATTERN, dbSupport.getIdentifierQuoteString() + '?' + dbSupport.getIdentifierQuoteString());
        // Make sure that batched statements are used to insert the data into the database
        config.setProperty(FEATURE_BATCHED_STATEMENTS, "true");
        // Make sure that Oracle's recycled tables (BIN$) are ignored (value is used to ensure dbunit-2.2 compliancy)
        config.setProperty("http://www.dbunit.org/features/skipOracleRecycleBinTables", "true");
		
		/*******************************
				to fix unitils bug
		*******************************/
		if(dbSupport.getDatabaseDialect().equalsIgnoreCase("db2"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new Db2DataTypeFactory());
			config.setProperty(PROPERTY_METADATA_HANDLER, new Db2MetadataHandler());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("hsqldb"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new HsqldbDataTypeFactory());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("mssql"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new MsSqlDataTypeFactory());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("mysql"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new MySqlDataTypeFactory());
			config.setProperty(PROPERTY_METADATA_HANDLER, new MySqlMetadataHandler());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("oracle"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new OracleDataTypeFactory());
		}
		else if (dbSupport.getDatabaseDialect().equalsIgnoreCase("postgresql"))
		{
			config.setProperty(PROPERTY_DATATYPE_FACTORY, new PostgresqlDataTypeFactory());
		}

        return connection;
    }
    
注意import下面的类
import org.dbunit.ext.mysql.MySqlDataTypeFactory;
import org.dbunit.ext.mysql.MySqlMetadataHandler;
import org.dbunit.ext.db2.Db2DataTypeFactory;
import org.dbunit.ext.db2.Db2MetadataHandler;
import org.dbunit.ext.hsqldb.HsqldbDataTypeFactory;
import org.dbunit.ext.mssql.MsSqlDataTypeFactory;
import org.dbunit.ext.oracle.OracleDataTypeFactory;
import org.dbunit.ext.postgresql.PostgresqlDataTypeFactory;

修改pom.xml文件进行打包，默认是
<dependency>
            <groupId>org.dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>2.2.2</version>-----------------------------------改为2.4.8，2.2.2只有MySqlDataTypeFactory，没有MySqlMetadataHandler，但是2.4.8有
</dependency>

进入pom.xml目录运行mvn clean install -Dgpg.skip打jar包（略过GPG，否则会有下面的问题）
********************************************************************************************
[INFO] --- maven-gpg-plugin:1.4:sign (sign-artifacts) @ citrus-parent ---
GPG Passphrase: *

不知道输入什么, 按回车就提示:

*gpg: no default secret key: secret key not available
gpg: signing failed: secret key not available
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
********************************************************************************************
最后用修改后的jar替换原jar，ok

fuck，unitils3.2这样修改可以，但是unitils3.3不行，最终参考http://hi.baidu.com/bearhzl/blog/item/3a07f208a60f4c95d0581b2d.html得以解决
修改dbunit2.4.8的DefaultMetadataHandler.java（74行），颠倒1和2的次序
		String catalogName = columnsResultSet.getString(1);-------------------此处修改了
        String schemaName = columnsResultSet.getString(2);-------------------此处修改了
        String tableName = columnsResultSet.getString(3);
        String columnName = columnsResultSet.getString(4);
修改为：
		String catalogName = columnsResultSet.getString(2);
        String schemaName = columnsResultSet.getString(1);
        String tableName = columnsResultSet.getString(3);
        String columnName = columnsResultSet.getString(4);

DatabaseTableMetaData.java（303）
		if (_columns == null)-------------------此处修改了
        {
            try
            {
                // qualified names support
            	String schemaName = _qualifiedTableNameSupport.getSchema();
            	String tableName = _qualifiedTableNameSupport.getTable();
修改为：
		if (_columns == null || _columns.length == 0)
        {
            try
            {
                // qualified names support
            	String schemaName = _qualifiedTableNameSupport.getSchema();
            	String tableName = _qualifiedTableNameSupport.getTable();
保存两个修改文件然后打包mvn clean install -Dgpg.skip -Dmaven.test.skip=true。



4.Tomcat在启动时出现如下异常问题： 
[apache.catalina.session.ManagerBase:373] IOException while loading persisted sessions: java.io.EOFException 
处理方法如下：将work下面的文件清空。