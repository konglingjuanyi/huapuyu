<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- 目标对象 -->
	<bean id="custService" class="com.anders.ssh.aop.impl.CustServiceImpl"/>
	
	<!-- 环绕 -->
	<bean id="aroundAdvice" class="com.anders.ssh.aop.spring.AroundAdvice"/>
	
	<!-- 前置 -->
	<bean id="beforeAdvice" class="com.anders.ssh.aop.spring.BeforeAdvice"/>
	
	<!-- 后置 -->
	<bean id="afterAdvice" class="com.anders.ssh.aop.spring.AfterAdvice"/>
	
	<!-- 异常 -->
	<bean id="throwAdvice" class="com.anders.ssh.aop.spring.ThrowAdvice"/>
	
	<!-- 
 	如果一个需要被代理的目标对象的类（后面将简单地称它为目标类）没有实现任何接口，
	那么一个基于CGLIB的代理将被创建。
	这是最简单的场景，因为JDK代理是基于接口的，没有接口意味着没有使用JDK进行代理的可能。 
	-->
	<!-- 
	ProxyFactoryBean用于粗粒度的控制目标类，在其前、后、异常、环绕加入相应的处理方法，针对的是类中的所有方法。 
	和Advisor配合使用，可以实现细粒度的控制目标类。
	-->
	<!-- 配置方法1 -->
	<bean id="proxyCustService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<!-- 注入目标对象 --> 
        <property name="target" ref="custService"/>
        <!-- 注入Advice/Interceptor -->
        <property name="interceptorNames">
            <list>
                <!-- 
                <value>beforeAdvice</value> 
                <value>afterAdvice</value>
                <value>throwAdvice</value>
                <value>aroundAdvice</value> 
                -->
                <value>throwAdvisor</value> 
                <value>beforeAdvisor</value>
            </list>
        </property>
        <!-- 以下配置可有可无 -->
        <property name="proxyInterfaces"> 
        	<value>com.anders.ssh.aop.CustService</value>
        </property>
    </bean>
    
    <!-- 匹配方法名 -->
    <bean id="throwAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="advice" ref="throwAdvice"/>
    	<property name="mappedNames">
      		<list>
        		<value>delet*</value>
      		</list>
    	</property>
	</bean>
    
    <!-- 匹配类名和方法名 -->
    <bean id="beforeAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="beforeAdvice"/>
    	<property name="patterns">
      		<list>
        		<value>.*ustService.*pdate</value>
      		</list>
    	</property>
	</bean>
    
    <!-- 配置方法2 -->
    <bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>cust*</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>aroundAdvice</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置方法3 -->	
	<!-- 只针对Advisor，Advice会被忽略 -->
	<!--
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    -->
</beans>
