// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:381


#include "echoC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/UB_String_Arguments.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "echoC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for Echo.

Echo_ptr
TAO::Objref_Traits<Echo>::duplicate (
    Echo_ptr p)
{
  return Echo::_duplicate (p);
}

void
TAO::Objref_Traits<Echo>::release (
    Echo_ptr p)
{
  ::CORBA::release (p);
}

Echo_ptr
TAO::Objref_Traits<Echo>::nil (void)
{
  return Echo::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Echo>::marshal (
    const Echo_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_Echo_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

char * Echo::echoString (
    const char * msg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Echo_Proxy_Broker_ == 0)
    {
      Echo_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Char *>::in_arg_val _tao_msg (msg);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_msg
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "echoString",
      10,
      this->the_TAO_Echo_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

Echo::Echo (void)
 : the_TAO_Echo_Proxy_Broker_ (0)
{
  this->Echo_setup_collocation ();
}

void
Echo::Echo_setup_collocation ()
{
  if (::_TAO_Echo_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Echo_Proxy_Broker_ =
        ::_TAO_Echo_Proxy_Broker_Factory_function_pointer (this);
    }
}

Echo::~Echo (void)
{}

void 
Echo::_tao_any_destructor (void *_tao_void_pointer)
{
  Echo *_tao_tmp_pointer =
    static_cast<Echo *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Echo_ptr
Echo::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Echo>::narrow (
        _tao_objref,
        "IDL:Echo:1.0",
        _TAO_Echo_Proxy_Broker_Factory_function_pointer
      );
}

Echo_ptr
Echo::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Echo>::unchecked_narrow (
        _tao_objref,
        "IDL:Echo:1.0",
        _TAO_Echo_Proxy_Broker_Factory_function_pointer
      );
}

Echo_ptr
Echo::_duplicate (Echo_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Echo::_tao_release (Echo_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Echo::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:Echo:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Echo::_interface_repository_id (void) const
{
  return "IDL:Echo:1.0";
}

::CORBA::Boolean
Echo::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Echo (
    ::CORBA::tk_objref,
    "IDL:Echo:1.0",
    "Echo");
  
::CORBA::TypeCode_ptr const _tc_Echo =
  &_tao_tc_Echo;

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Echo>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Echo_ptr _tao_elem)
{
  Echo_ptr _tao_objptr =
    Echo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Echo_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Echo>::insert (
      _tao_any,
      Echo::_tao_any_destructor,
      _tc_Echo,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Echo_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Echo>::extract (
        _tao_any,
        Echo::_tao_any_destructor,
        _tc_Echo,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Echo_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Echo_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Echo RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_Echo_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



